#!/usr/bin/env python3
"""
Script para probar la funcionalidad de ocultaci√≥n de escaneos (soft delete)
"""

import requests
import json
import time

def test_hide_scans():
    """Prueba la funcionalidad de ocultaci√≥n de escaneos"""
    print("üß™ Probando funcionalidad de ocultaci√≥n de escaneos...")
    print("=" * 60)
    
    base_url = "http://localhost:3001"
    
    # 1. Primero obtener los escaneos existentes
    print("1Ô∏è‚É£ Obteniendo escaneos existentes...")
    try:
        response = requests.get(
            f'{base_url}/api/get-scans/1',
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            data = response.json()
            scans = data.get('scans', [])
            print(f"‚úÖ Encontrados {len(scans)} escaneos activos")
            
            if len(scans) == 0:
                print("‚ùå No hay escaneos para probar")
                return False
            
            # Mostrar algunos escaneos
            for i, scan in enumerate(scans[:3]):
                print(f"   üìã Escaneo {i+1}: ID {scan.get('id')} - {scan.get('url')}")
            
            # 2. Probar ocultaci√≥n de un escaneo individual
            if len(scans) > 0:
                test_scan = scans[0]
                print(f"\n2Ô∏è‚É£ Probando ocultaci√≥n individual del escaneo {test_scan.get('id')}...")
                
                response = requests.post(
                    f'{base_url}/api/hide-scan',
                    json={
                        'scanId': test_scan.get('id'),
                        'userId': 1
                    },
                    headers={'Content-Type': 'application/json'}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        print("‚úÖ Escaneo ocultado exitosamente")
                    else:
                        print(f"‚ùå Error: {data.get('message')}")
                        return False
                else:
                    print(f"‚ùå Error HTTP: {response.status_code}")
                    return False
            
            # 3. Verificar que el escaneo ya no aparece en la lista
            print("\n3Ô∏è‚É£ Verificando que el escaneo ocultado no aparece...")
            time.sleep(1)  # Peque√±a pausa
            
            response = requests.get(
                f'{base_url}/api/get-scans/1',
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                data = response.json()
                remaining_scans = data.get('scans', [])
                print(f"‚úÖ Quedan {len(remaining_scans)} escaneos activos")
                
                # Verificar que el escaneo ocultado no est√° en la lista
                hidden_scan_found = any(scan.get('id') == test_scan.get('id') for scan in remaining_scans)
                if not hidden_scan_found:
                    print("‚úÖ El escaneo ocultado no aparece en la lista (correcto)")
                else:
                    print("‚ùå El escaneo ocultado a√∫n aparece en la lista")
                    return False
            
            # 4. Probar ocultaci√≥n m√∫ltiple si hay suficientes escaneos
            if len(remaining_scans) >= 2:
                print(f"\n4Ô∏è‚É£ Probando ocultaci√≥n m√∫ltiple...")
                
                scan_ids = [scan.get('id') for scan in remaining_scans[:2]]
                print(f"   üìã Ocultando escaneos: {scan_ids}")
                
                response = requests.post(
                    f'{base_url}/api/hide-scans',
                    json={
                        'scanIds': scan_ids,
                        'userId': 1
                    },
                    headers={'Content-Type': 'application/json'}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        print(f"‚úÖ {len(scan_ids)} escaneos ocultados exitosamente")
                    else:
                        print(f"‚ùå Error: {data.get('message')}")
                        return False
                else:
                    print(f"‚ùå Error HTTP: {response.status_code}")
                    return False
                
                # Verificar resultado final
                time.sleep(1)
                response = requests.get(
                    f'{base_url}/api/get-scans/1',
                    headers={'Content-Type': 'application/json'}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    final_scans = data.get('scans', [])
                    print(f"‚úÖ Quedan {len(final_scans)} escaneos activos despu√©s de ocultaci√≥n m√∫ltiple")
            
            # 5. Verificar en base de datos
            print("\n5Ô∏è‚É£ Verificando en base de datos...")
            try:
                from backend.config.supabase_config import db
                
                # Contar escaneos activos
                active_scans = db.execute_one("SELECT COUNT(*) as count FROM escaneos WHERE id_usuario = 1 AND eliminado = FALSE")
                if active_scans:
                    print(f"‚úÖ Escaneos activos en BD: {active_scans['count']}")
                
                # Contar escaneos ocultados
                hidden_scans = db.execute_one("SELECT COUNT(*) as count FROM escaneos WHERE id_usuario = 1 AND eliminado = TRUE")
                if hidden_scans:
                    print(f"‚úÖ Escaneos ocultados en BD: {hidden_scans['count']}")
                
                # Mostrar algunos escaneos ocultados
                hidden_examples = db.execute_query(
                    "SELECT id, url, tipo_escaneo, updated_at FROM escaneos WHERE id_usuario = 1 AND eliminado = TRUE ORDER BY updated_at DESC LIMIT 3"
                )
                
                if hidden_examples:
                    print("üìã Ejemplos de escaneos ocultados:")
                    for scan in hidden_examples:
                        print(f"   ‚Ä¢ ID {scan['id']}: {scan['url']} ({scan['tipo_escaneo']}) - Ocultado: {scan['updated_at']}")
                
            except Exception as e:
                print(f"‚ùå Error verificando BD: {e}")
        
        else:
            print(f"‚ùå Error obteniendo escaneos: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en prueba: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ ¬°Pruebas de ocultaci√≥n completadas exitosamente!")
    print("‚úÖ La funcionalidad de soft delete est√° funcionando correctamente")
    print("\nüìã Resumen de funcionalidades:")
    print("   ‚Ä¢ Ocultaci√≥n individual de escaneos ‚úÖ")
    print("   ‚Ä¢ Ocultaci√≥n m√∫ltiple de escaneos ‚úÖ")
    print("   ‚Ä¢ Filtrado autom√°tico en consultas ‚úÖ")
    print("   ‚Ä¢ Verificaci√≥n de autorizaci√≥n ‚úÖ")
    print("   ‚Ä¢ Auditor√≠a legal mantenida ‚úÖ")
    
    return True

if __name__ == '__main__':
    # Esperar un poco para que el servidor est√© listo
    print("‚è≥ Esperando que el servidor est√© listo...")
    time.sleep(2)
    
    test_hide_scans() 