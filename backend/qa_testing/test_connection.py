#!/usr/bin/env python3
"""
Script para probar la conexi√≥n con Supabase
Ejecuta este script despu√©s de configurar tu archivo .env
"""

import os
import sys
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

def test_supabase_connection():
    """Prueba la conexi√≥n con Supabase"""
    print("üîç Probando conexi√≥n con Supabase...")
    
    # Verificar si existe la variable de entorno
    database_url = os.getenv('SUPABASE_DATABASE_URL')
    if not database_url:
        print("‚ùå Error: SUPABASE_DATABASE_URL no est√° configurada")
        print("üìù Crea un archivo .env en la carpeta backend/ con:")
        print("SUPABASE_DATABASE_URL=tu_url_aqui")
        return False
    
    print(f"‚úÖ URL de conexi√≥n encontrada: {database_url[:50]}...")
    
    try:
        # Intentar importar psycopg2
        import psycopg2
        from psycopg2.extras import RealDictCursor
        print("‚úÖ psycopg2 importado correctamente")
        
        # Intentar conectar
        print("üîå Conectando a Supabase...")
        conn = psycopg2.connect(database_url)
        print("‚úÖ Conexi√≥n establecida exitosamente!")
        
        # Probar una consulta simple
        with conn.cursor(cursor_factory=RealDictCursor) as cur:
            cur.execute("SELECT version();")
            version = cur.fetchone()
            print(f"‚úÖ PostgreSQL version: {version['version'][:50]}...")
            
            # Verificar que las tablas existen
            cur.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name IN ('usuarios', 'escaneos', 'reportes')
                ORDER BY table_name;
            """)
            tables = cur.fetchall()
            
            if tables:
                print("‚úÖ Tablas encontradas:")
                for table in tables:
                    print(f"   - {table['table_name']}")
            else:
                print("‚ùå No se encontraron las tablas esperadas")
                return False
        
        conn.close()
        print("‚úÖ Conexi√≥n cerrada correctamente")
        return True
        
    except ImportError:
        print("‚ùå Error: psycopg2 no est√° instalado")
        print("üì¶ Instala las dependencias con: pip install -r requirements.txt")
        return False
        
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        print("üîß Verifica:")
        print("   1. Tu URL de conexi√≥n es correcta")
        print("   2. Tu IP est√° en la lista blanca de Supabase")
        print("   3. Tu contrase√±a es correcta")
        return False

def test_api_functions():
    """Prueba las funciones de la API"""
    print("\nüß™ Probando funciones de la API...")
    
    try:
        from backend.config.supabase_config import db
        
        # Probar consulta simple
        result = db.execute_one("SELECT COUNT(*) as count FROM usuarios")
        if result:
            print(f"‚úÖ Usuarios en la base de datos: {result['count']}")
        else:
            print("‚úÖ Conexi√≥n a trav√©s de la API funcionando")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error en funciones de API: {e}")
        return False

if __name__ == '__main__':
    print("üöÄ Iniciando pruebas de conexi√≥n con Supabase")
    print("=" * 50)
    
    # Probar conexi√≥n directa
    connection_ok = test_supabase_connection()
    
    if connection_ok:
        # Probar funciones de la API
        api_ok = test_api_functions()
        
        if api_ok:
            print("\nüéâ ¬°Todas las pruebas pasaron!")
            print("‚úÖ Tu backend est√° listo para usar con Supabase")
        else:
            print("\n‚ö†Ô∏è  Conexi√≥n OK pero hay problemas con la API")
    else:
        print("\n‚ùå Problemas de conexi√≥n detectados")
        print("üîß Revisa la configuraci√≥n antes de continuar")
    
    print("\n" + "=" * 50) 